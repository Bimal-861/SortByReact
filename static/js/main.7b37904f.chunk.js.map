{"version":3,"sources":["VisualizerController.js","SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["VisualizerController","Component","constructor","props","super","this","state","sortingAlgorithm","speed","size","barColor","pointerColor","sortedColor","message","onSelectingSortingAlgorithm","bind","onSelectingSpeed","onSelectingSize","onSelectingBarColor","onSelectingPointerColor","onSelectingSortedColor","randomize","sort","randomizeRef","React","createRef","sortRef","componentDidUpdate","visualizerData","current","textContent","eventKey","event","setState","document","getElementsByClassName","innerHTML","someInfo","console","log","temp","update","controllerDataHandler","disabled","getElementById","render","createElement","className","Container","SplitButton","title","id","variant","onSelect","Dropdown","Item","Divider","Button","ref","onClick","Tuple","first","second","operation","SortingVisualizer","arr","sorted","width","height","componentDidMount","window","screen","controllerData","Set","parseInt","add","getRandomElement","Array","from","getColor","previousProps","previousState","cd","cocktailSort","heapSort","insertionSort","linearSort","mergeSortUtil","quickSortUtil","selectionSort","bubbleSort","newState","bars","e","length","style","backgroundColor","visualizerDataHandler","f","eIndex","fIndex","n","i","j","gValue","gWidth","sleep","getSpeed","swapped","start","end","tempWidth","leftIndex","rightIndex","x","y","Math","floor","max","p","g","jValue","jWidth","graphics","slice","high","mergeSort","low","middle","merge","r","push","k","a","b","quickSort","pi","partition","pivot","m","ms","Promise","resolve","setTimeout","getBarHeight","getfontHeight","random","map","value","idx","key","concat","fontSize","App","default","scrollIntoView","behavior","block","fluid","Row","Col","lg","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7b37904f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\n\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport SplitButton from \"react-bootstrap/SplitButton\";\n\nimport \"./VisualizerController.css\";\nclass VisualizerController extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sortingAlgorithm: \"Bubble Sort\",\n      speed: \"Normal\",\n      size: \"20\",\n      barColor: \"Blue\",\n      pointerColor: \"Cyan\",\n      sortedColor: \"Green\",\n      message: \"Feeling lazy ? its OK , just click Sort ! \",\n    };\n    this.onSelectingSortingAlgorithm = this.onSelectingSortingAlgorithm.bind(this);\n    this.onSelectingSpeed = this.onSelectingSpeed.bind(this);\n    this.onSelectingSize = this.onSelectingSize.bind(this);\n    this.onSelectingBarColor = this.onSelectingBarColor.bind(this);\n    this.onSelectingPointerColor = this.onSelectingPointerColor.bind(this);\n    this.onSelectingSortedColor = this.onSelectingSortedColor.bind(this);\n    this.randomize = this.randomize.bind(this);\n    this.sort = this.sort.bind(this);\n    this.randomizeRef = React.createRef();\n    this.sortRef = React.createRef();\n  }\n  componentDidUpdate() {\n    if (this.props.visualizerData === true) {\n      this.randomizeRef.current.textContent = \"Randomize Array\";\n    }\n  }\n  onSelectingSortingAlgorithm(eventKey, event) {\n    this.setState({\n      sortingAlgorithm: eventKey,\n    });\n    //console.log(eventKey);\n    let item=document.getElementsByClassName('inf');\n    item[0].innerHTML=this.someInfo(eventKey);\n    //console.log(item)\n    \n  }\n  someInfo(eventKey)\n  {\n    console.log(eventKey)\n    switch(eventKey)\n    {\n      case \"Bubble Sort\" :\n        return \"Bubble Sort <br> Time Complexcity : O(n^2) <br> Space Complexcity O(1)\";\n        \n\n      case \"Linear Sort\" :\n        return \"Linear Sort <br> Time Complexcity : O(n^2) <br> Space Complexcity O(1)\"\n      \n      case \"Selection Sort\" :\n        return \"Selection Sort <br> Time Complexcity : O(n^2) <br> Space Complexcity O(1)\"\n      case \"Insertion Sort\" :\n        return \"Insertion Sort <br> Time Complexcity : O(n^2) <br> Space Complexcity O(1)\"\n      case \"Heap Sort\" :\n        return \"Heap Sort <br> Time Complexcity : O(nlog(n)) <br> Space Complexcity O(1)\"\n      case \"Merge Sort\" :\n        return \"Merge Sort <br> Time Complexcity : O(nlog(n)) <br> Space Complexcity O(n)\"\n      case \"Quick Sort\":\n        return \"Quick Sort <br> Time Complexcity : O(n^2) <br> Space Complexcity O(log(n))\"\n        default:\n          return \"Sorting\"\n    }\n  }\n  onSelectingSpeed(eventKey, event) {\n    this.setState({\n      speed: eventKey,\n    });\n  }\n  onSelectingSize(eventKey, event) {\n    let temp = this.update();\n    temp[\"sort\"] = false;\n    temp[\"randomize\"] = true;\n    temp[\"size\"] = eventKey;\n    this.setState(temp, function () {\n      this.props.controllerDataHandler(this.state);\n    });\n  }\n  onSelectingBarColor(eventKey, event) {\n    let temp = this.update();\n    temp[\"sort\"] = false;\n    temp[\"randomize\"] = false;\n    temp[\"barColor\"] = eventKey;\n    this.setState(temp, function () {\n      this.props.controllerDataHandler(this.state);\n    });\n  }\n  onSelectingPointerColor(eventKey, event) {\n    this.setState({\n      pointerColor: eventKey,\n    });\n  }\n  onSelectingSortedColor(eventKey, event) {\n    this.setState({\n      sortedColor: eventKey,\n    });\n  }\n  update() {\n    var temp = {\n      sortingAlgorithm: \"\",\n      speed: \"\",\n      size: \"\",\n      barColor: \"\",\n      pointerColor: \"\",\n      sortedColor: \"\",\n    };\n    temp.sortingAlgorithm = this.state.sortingAlgorithm;\n    temp.size = this.state.size;\n    temp.speed = this.state.speed;\n    temp.barColor = this.state.barColor;\n    temp.pointerColor = this.state.pointerColor;\n    temp.sortedColor = this.state.sortedColor;\n    return temp;\n  }\n  randomize() {\n    this.randomizeRef.current.textContent = \"Randomize Array\";\n    this.sortRef.current.disabled = false;\n    document.getElementById(\"speed\").disabled = false;\n    document.getElementById(\"size\").disabled = false;\n    document.getElementById(\"sortingAlogrithm\").disabled = false;\n    document.getElementById(\"barColor\").disabled = false;\n    //document.getElementById(\"pointerColor\").disabled = false;\n    //document.getElementById(\"sortedColor\").disabled = false;\n    let temp = this.update();\n    temp[\"sort\"] = false;\n    temp[\"randomize\"] = true;\n    this.setState(temp, function () {\n      this.props.controllerDataHandler(this.state);\n    });\n  }\n  sort() {\n    this.randomizeRef.current.textContent = \"Stop & Randomize Array\";\n    this.sortRef.current.disabled = true;\n    document.getElementById(\"speed\").disabled = true;\n    document.getElementById(\"size\").disabled = true;\n    document.getElementById(\"sortingAlogrithm\").disabled = true;\n    document.getElementById(\"barColor\").disabled = true;\n    //document.getElementById(\"pointerColor\").disabled = true;\n    //document.getElementById(\"sortedColor\").disabled = true;\n    let temp = this.update();\n    temp[\"sort\"] = true;\n    temp[\"randomize\"] = false;\n    temp[\"sorted\"] = false;\n    this.setState(temp, function () {\n      this.props.controllerDataHandler(this.state);\n    });\n  }\n  render() {\n    return (\n      <div className=\"VisualizerController\">\n        <Container>\n            <SplitButton\n              title={this.state.sortingAlgorithm}\n              id=\"sortingAlogrithm\"\n              variant=\"light\"\n              onSelect={this.onSelectingSortingAlgorithm}\n            >\n              <Dropdown.Item disabled>Sorting Algorithms</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"Bubble Sort\">\n                Bubble Sort (Default)\n            </Dropdown.Item>\n              <Dropdown.Item eventKey=\"Linear Sort\">Linear Sort</Dropdown.Item>\n              \n            <Dropdown.Item eventKey=\"Selection Sort\">\n              Selection Sort\n            </Dropdown.Item>\n\n            <Dropdown.Item eventKey=\"Insertion Sort\">\n              Insertion Sort\n            </Dropdown.Item>\n\n              <Dropdown.Item eventKey=\"Heap Sort\">Heap Sort</Dropdown.Item>\n              \n              <Dropdown.Item eventKey=\"Merge Sort\">Merge Sort</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Quick Sort\">Quick Sort</Dropdown.Item>\n            </SplitButton>\n            &nbsp;&nbsp;&nbsp;\n            <SplitButton\n              title={this.state.speed}\n              id=\"speed\"\n              variant=\"light\"\n              onSelect={this.onSelectingSpeed}\n            >\n              <Dropdown.Item disabled>Speed Of Visualization</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"Very Fast\">Very fast</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Fast\">Fast</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Normal\">Normal (Default)</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Slow\">Slow</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Very Slow\">Very Slow</Dropdown.Item>\n            </SplitButton>\n            &nbsp;&nbsp;&nbsp;\n            <SplitButton\n              title={this.state.size}\n              id=\"size\"\n              variant=\"light\"\n              onSelect={this.onSelectingSize}\n            >\n              <Dropdown.Item disabled>Size Of Array</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"10\">10</Dropdown.Item>\n              <Dropdown.Item eventKey=\"15\">15</Dropdown.Item>\n              <Dropdown.Item eventKey=\"20\">20 (Default)</Dropdown.Item>\n              <Dropdown.Item eventKey=\"25\">25</Dropdown.Item>\n              <Dropdown.Item eventKey=\"30\">30</Dropdown.Item>\n              <Dropdown.Item eventKey=\"35\">35</Dropdown.Item>\n              \n            </SplitButton>\n            &nbsp;&nbsp;&nbsp;\n            <SplitButton\n              title={this.state.barColor}\n              id=\"barColor\"\n              variant=\"light\"\n              onSelect={this.onSelectingBarColor}\n            >\n              <Dropdown.Item disabled>Color Of Bar</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"Black\">Black</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Blue\">Blue (Default)</Dropdown.Item>\n\n\n              <Dropdown.Item eventKey=\"Pink\">Pink</Dropdown.Item>\n\n              <Dropdown.Item eventKey=\"Grey\">Grey</Dropdown.Item>\n            </SplitButton>\n            &nbsp;&nbsp;&nbsp;\n            {/* <SplitButton\n              title={this.state.pointerColor}\n              id=\"pointerColor\"\n              variant=\"light\"\n              onSelect={this.onSelectingPointerColor}\n            >\n              <Dropdown.Item disabled>Color Of Comparisions</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"Black\">Black</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Blue\">Blue</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Cyan\">Cyan</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Green\">Green</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Pink\">Pink</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Red\">Red (Default)</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Yellow\">Yellow</Dropdown.Item>\n            </SplitButton>\n            &nbsp;&nbsp;&nbsp;\n            <SplitButton\n              title={this.state.sortedColor}\n              id=\"sortedColor\"\n              variant=\"light\"\n              onSelect={this.onSelectingSortedColor}\n            >\n              <Dropdown.Item disabled>Color Of Sorted Elements</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"Black\">Black</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Blue\">Blue</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Cyan\">Cyan</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Green\">Green (Default)</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Pink\">Pink</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Red\">Red</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Yellow\">Yellow</Dropdown.Item>\n            </SplitButton>\n            &nbsp;&nbsp;&nbsp; */}\n            <Button\n              ref={this.randomizeRef}\n              size=\"lg\"\n              variant=\"danger\"\n              onClick={this.randomize}\n            >\n              Randomize Array\n            </Button>\n            &nbsp;&nbsp;&nbsp;\n            <Button\n              ref={this.sortRef}\n              size=\"lg\"\n              variant=\"success\"\n              onClick={this.sort}\n            >\n              Sort !\n            </Button>\n          \n        </Container>\n      </div>\n    );\n  }\n}\nexport default VisualizerController;\n","import React from \"react\";\nimport \"./SortingVisualizer.css\";\n\nclass Tuple {\n  constructor(first, second, operation) {\n    this.first = first;\n    this.second = second;\n    this.operation = operation;\n  }\n}\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      arr: [],\n      sortingAlgorithm: \"\",\n      size: \"\",\n      speed: \"\",\n      barColor: \"\",\n      pointerColor: \"\",\n      sort: false,\n      randomize: false,\n    };\n    this.sorted = false;\n    this.width = 0;\n    this.height = 0;\n  }\n\n  componentDidMount() {\n    console.log(\"Console did mount\")\n    this.width = window.screen.width;\n    this.height = window.screen.height;\n    \n    \n    let controllerData = this.props.controllerData;\n    let temp = new Set();\n    while (temp.size !== parseInt(controllerData[\"size\"])) {\n      temp.add(this.getRandomElement());\n    }\n    temp = Array.from(temp);\n    this.setState({\n      arr: temp,\n      sortingAlgorithm: controllerData[\"sortingAlgorithm\"],\n      size: controllerData[\"size\"],\n      speed: controllerData[\"speed\"],\n      barColor: this.getColor(controllerData[\"barColor\"]),\n      pointerColor: this.getColor(controllerData[\"pointerColor\"]),\n      sortedColor: this.getColor(controllerData[\"sortedColor\"]),\n      sort: controllerData[\"sort\"],\n      randomize: controllerData[\"randomize\"],\n    });\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    //console.log(\"Component did update mount\")\n    if (previousProps.controllerData !== this.props.controllerData) {\n      let controllerData = this.props.controllerData;\n      let cd = {};\n      if (controllerData[\"sort\"] === true) {\n        cd = {\n          sortingAlgorithm: controllerData[\"sortingAlgorithm\"],\n          size: controllerData[\"size\"],\n          speed: controllerData[\"speed\"],\n          barColor: this.getColor(controllerData[\"barColor\"]),\n          pointerColor: this.getColor(controllerData[\"pointerColor\"]),\n          sortedColor: this.getColor(controllerData[\"sortedColor\"]),\n          sort: controllerData[\"sort\"],\n          randomize: controllerData[\"randomize\"],\n        };\n        switch (controllerData.sortingAlgorithm) {\n          case \"Cocktail Sort\":\n            this.setState(cd, function () {\n              this.cocktailSort();\n            });\n            break;\n\n          case \"Heap Sort\":\n            this.setState(cd, function () {\n              this.heapSort();\n            });\n            break;\n\n          case \"Insertion Sort\":\n            this.setState(cd, function () {\n              this.insertionSort();\n            });\n            break;\n\n          case \"Linear Sort\":\n            this.setState(cd, function () {\n              this.linearSort();\n            });\n            break;\n\n          case \"Merge Sort\":\n            this.setState(cd, function () {\n              this.mergeSortUtil();\n            });\n            break;\n\n          case \"Quick Sort\":\n            this.setState(cd, function () {\n              this.quickSortUtil();\n            });\n            break;\n\n          case \"Selection Sort\":\n            this.setState(cd, function () {\n              this.selectionSort();\n              console.log(\"Selection sort\")\n            });\n            break;\n\n          default:\n            this.setState(cd, function () {\n              this.bubbleSort();\n              //console.log(\"bubble sort\")\n            });\n            break;\n        }\n      } // if sort=== true ends\n      else {\n        let newState = {};\n        let temp = new Set();\n        if (parseInt(this.state[\"size\"]) !== parseInt(controllerData[\"size\"])) {\n          newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n          newState[\"size\"] = parseInt(controllerData[\"size\"]);\n          newState[\"speed\"] = controllerData[\"speed\"];\n          newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n          newState[\"pointerColor\"] = this.getColor(\n            controllerData[\"pointerColor\"]\n          );\n          newState[\"sortedColor\"] = this.getColor(\n            controllerData[\"sortedColor\"]\n          );\n          newState[\"randomize\"] = controllerData[\"randomize\"];\n          newState[\"sort\"] = controllerData[\"sort\"];\n          while (temp.size !== newState[\"size\"]) {\n            temp.add(this.getRandomElement());\n          }\n          temp = Array.from(temp);\n          newState[\"arr\"] = temp;\n        } else {\n          if (controllerData[\"randomize\"] === true) {\n            newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n            newState[\"size\"] = parseInt(controllerData[\"size\"]);\n            newState[\"speed\"] = controllerData[\"speed\"];\n            newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n            newState[\"pointerColor\"] = this.getColor(\n              controllerData[\"pointerColor\"]\n            );\n            newState[\"sortedColor\"] = this.getColor(\n              controllerData[\"sortedColor\"]\n            );\n            newState[\"randomize\"] = controllerData[\"randomize\"];\n            newState[\"sort\"] = controllerData[\"sort\"];\n            while (temp.size !== newState[\"size\"]) {\n              temp.add(this.getRandomElement());\n            }\n            temp = Array.from(temp);\n            newState[\"arr\"] = temp;\n            let bars = document.getElementsByClassName(\"array-bar\");\n            for (let e = 0; e < bars.length; e++)\n              bars[e].style.backgroundColor = newState[\"barColor\"];\n          } else {\n            newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n            newState[\"size\"] = parseInt(controllerData[\"size\"]);\n            newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n            newState[\"pointerColor\"] = this.getColor(\n              controllerData[\"pointerColor\"]\n            );\n            newState[\"sortedColor\"] = this.getColor(\n              controllerData[\"sortedColor\"]\n            );\n            newState[\"speed\"] = controllerData[\"speed\"];\n            newState[\"arr\"] = this.state.arr;\n          }\n        }\n        this.setState(newState);\n      }// else sort==false\n    }\n  } //component did update ends\n\n\n  //--------------------------SORTING ALGORITHMS STARTS FROM HERE--------------------------------\n  async bubbleSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let e, f, eIndex, fIndex;\n    for (let i = 0; i < n - 1; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        \n        bars[j + 1].style.backgroundColor = this.state.pointerColor;\n        \n        e = parseInt(bars[j].innerHTML);\n        eIndex = j;\n        f = parseInt(bars[j + 1].innerHTML);\n        fIndex = j + 1;\n        if (e > f) {\n          let gValue = bars[eIndex].innerHTML;\n          let gWidth = bars[eIndex].style.width;\n          bars[eIndex].innerHTML = bars[fIndex].innerHTML;\n          bars[eIndex].style.width = bars[fIndex].style.width;\n          bars[fIndex].innerHTML = gValue;\n          bars[fIndex].style.width = gWidth;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n        }\n        bars[j].style.backgroundColor = this.state.barColor;\n        \n        bars[j + 1].style.backgroundColor = this.state.barColor;\n        \n      }\n      bars[n - i - 1].style.backgroundColor = this.state.sortedColor;\n    }\n    bars[0].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async cocktailSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let swapped = true;\n    let start = 0;\n    let end = n - 1;\n    let gValue, gWidth;\n    while (swapped) {\n      swapped = false;\n      for (let i = start; i < end; ++i) {\n        if (parseInt(bars[i].innerHTML) > parseInt(bars[i + 1].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[i + 1].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[i + 1].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[i + 1].innerHTML);\n          bars[i].style.width = bars[i + 1].style.width;\n          bars[i + 1].innerHTML = gValue;\n          bars[i + 1].style.width = gWidth;\n          swapped = true;\n        }\n      }\n      if (!swapped) break;\n      swapped = false;\n      bars[end].style.backgroundColor = this.state.sortedColor;\n      --end;\n      for (let i = end - 1; i >= start; --i) {\n        if (parseInt(bars[i].innerHTML) > parseInt(bars[i + 1].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[i + 1].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[i + 1].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[i + 1].innerHTML);\n          bars[i].style.width = bars[i + 1].style.width;\n          bars[i + 1].innerHTML = gValue;\n          bars[i + 1].style.width = gWidth;\n          swapped = true;\n        }\n      }\n      bars[start].style.backgroundColor = this.state.sortedColor;\n      ++start;\n    }\n    let i = start;\n    let j = end;\n    while (i <= j) {\n      bars[j].style.backgroundColor = this.state.sortedColor;\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      i++;\n      j--;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async heapSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let arr = document.getElementsByClassName(\"array-bar\");\n    let temp, tempWidth;\n    let leftIndex, rightIndex, x, y;\n    let end;\n    //building heap\n    for (let e = 1; e < arr.length; e++) {\n      let i = e;\n      while (i > 0) {\n        if (\n          parseInt(arr[i].innerHTML) >\n          parseInt(arr[Math.floor((i - 1) / 2)].innerHTML)\n        ) {\n          x = i;\n          y = Math.floor((i - 1) / 2);\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          await this.sleep(this.getSpeed(this.state.speed));\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = y;\n        } else {\n          break;\n        }\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n    }\n    //heapify\n    for (let e = arr.length - 1; e > 0; e--) {\n      arr[0].style.backgroundColor = this.state.pointerColor;\n      arr[e].style.backgroundColor = this.state.pointerColor;\n      temp = arr[0].innerHTML;\n      tempWidth = arr[0].style.width;\n      arr[0].innerHTML = arr[e].innerHTML;\n      arr[0].style.width = arr[e].style.width;\n      arr[e].innerHTML = temp;\n      arr[e].style.width = tempWidth;\n      await this.sleep(this.getSpeed(this.state.speed));\n      arr[0].style.backgroundColor = this.state.barColor;\n      arr[e].style.backgroundColor = this.state.barColor;\n      end = e - 1;\n      let i = 0;\n      while (i <= end) {\n        leftIndex = 2 * i + 1;\n        if (leftIndex > end) break;\n        rightIndex = 2 * i + 2;\n        if (rightIndex > end) rightIndex = leftIndex;\n        if (\n          parseInt(arr[i].innerHTML) >=\n          Math.max(\n            parseInt(arr[leftIndex].innerHTML),\n            parseInt(arr[rightIndex].innerHTML)\n          )\n        )\n          break;\n        if (\n          parseInt(arr[leftIndex].innerHTML) >=\n          parseInt(arr[rightIndex].innerHTML)\n        ) {\n          x = i;\n          y = leftIndex;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          await this.sleep(this.getSpeed(this.state.speed));\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = leftIndex;\n        } else {\n          x = i;\n          y = rightIndex;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = rightIndex;\n        }\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n      arr[e].style.backgroundColor = this.state.sortedColor;\n    }\n    arr[0].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async insertionSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let p, g, gValue, gWidth, jValue, jWidth;\n    for (let i = 1; i <= n - 1; i++) {\n      p = i;\n      bars[i].style.backgroundColor = this.state.pointerColor;\n      gValue = parseInt(bars[p].innerHTML);\n      gWidth = bars[p].style.width;\n      for (let j = p - 1; j >= 0; j--, p--) {\n        jValue = parseInt(bars[j].innerHTML);\n        jWidth = bars[j].style.width;\n        g = j;\n        bars[g].style.backgroundColor = this.state.pointerColor;\n        if (gValue >= jValue) {\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[g].style.backgroundColor = this.state.sortedColor;\n          break;\n        }\n        bars[j + 1].innerHTML = jValue;\n        bars[j + 1].style.width = jWidth;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[g].style.backgroundColor = this.state.sortedColor;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      bars[p].innerHTML = gValue;\n      bars[p].style.width = gWidth;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async linearSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let i, j, gValue, gWidth;\n    i = 0;\n    while (i <= n - 2) {\n      j = i + 1;\n      while (j <= n - 1) {\n        bars[i].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        if (parseInt(bars[j].innerHTML) < parseInt(bars[i].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[j].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[j].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[j].innerHTML);\n          bars[i].style.width = bars[j].style.width;\n          bars[j].innerHTML = gValue;\n          bars[j].style.width = gWidth;\n        }\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[j].style.backgroundColor = this.state.barColor;\n        bars[i].style.backgroundColor = this.state.barColor;\n        j++;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      i++;\n    }\n    bars[n - 1].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async mergeSortUtil() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let graphics = [];\n    let arr = this.state.arr.slice();\n    let low = 0;\n    let high = arr.length - 1;\n    this.mergeSort(arr, low, high, graphics);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < graphics.length; i++) {\n      if (graphics[i].operation === \"add\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.pointerColor;\n        bars[graphics[i].second].style.backgroundColor =\n          this.state.pointerColor;\n      }\n      if (graphics[i].operation === \"remove\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.barColor;\n      }\n      if (graphics[i].operation === \"swap\") {\n        bars[graphics[i].first].innerHTML = graphics[i].second;\n        bars[graphics[i].first].style.width = graphics[i].second + \"px\";\n        bars[graphics[i].first].style.backgroundColor = this.state.sortedColor;\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  mergeSort(arr, low, high, graphics) {\n    if (low >= high) return;\n    var middle = Math.floor((low + high) / 2);\n    this.mergeSort(arr, low, middle, graphics);\n    this.mergeSort(arr, middle + 1, high, graphics);\n    this.merge(arr, low, high, graphics);\n  }\n\n  merge(arr, low, high, graphics) {\n    let middle = Math.floor((low + high) / 2);\n    let temp = new Array(high - low + 1);\n    let i = low;\n    let j = middle + 1;\n    let r = 0;\n    while (i <= middle && j <= high) {\n      graphics.push(new Tuple(i, j, \"add\"));\n      graphics.push(new Tuple(i, j, \"remove\"));\n      if (arr[i] <= arr[j]) {\n        temp[r] = arr[i];\n        r++;\n        i++;\n      } else {\n        temp[r] = arr[j];\n        r++;\n        j++;\n      }\n    }\n    while (i <= middle) {\n      graphics.push(new Tuple(i, i, \"add\"));\n      graphics.push(new Tuple(i, i, \"remove\"));\n      temp[r] = arr[i];\n      r++;\n      i++;\n    }\n    while (j <= high) {\n      graphics.push(new Tuple(j, j, \"add\"));\n      graphics.push(new Tuple(j, j, \"remove\"));\n      temp[r] = arr[j];\n      r++;\n      j++;\n    }\n    i = low;\n    for (let k = 0; k < temp.length; ) {\n      graphics.push(new Tuple(i, temp[k], \"swap\"));\n      arr[i] = temp[k];\n      i++;\n      k++;\n    }\n  }\n\n  async quickSortUtil() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let arr = this.state.arr.slice();\n    let low = 0;\n    let high = arr.length - 1;\n    let graphics = [];\n    let gValue, gWidth;\n    let sorted = this.state.arr.slice().sort(function (a, b) {\n      return a - b;\n    });\n    this.quickSort(arr, low, high, graphics, sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < graphics.length; i++) {\n      if (graphics[i].operation === \"add\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.pointerColor;\n        bars[graphics[i].second].style.backgroundColor =\n          this.state.pointerColor;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n      }\n      if (graphics[i].operation === \"fix\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.sortedColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.sortedColor;\n      }\n      if (graphics[i].operation === \"remove\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n      }\n      if (graphics[i].operation === \"swap\") {\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n        gValue = bars[graphics[i].first].innerHTML;\n        gWidth = bars[graphics[i].first].style.width;\n        bars[graphics[i].first].innerHTML = bars[graphics[i].second].innerHTML;\n        bars[graphics[i].first].style.width =\n          bars[graphics[i].second].style.width;\n        bars[graphics[i].second].innerHTML = gValue;\n        bars[graphics[i].second].style.width = gWidth;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n      }\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  quickSort(arr, low, high, graphics, sorted) {\n    if (low < high) {\n      let pi = this.partition(arr, low, high, graphics, sorted);\n      this.quickSort(arr, low, pi - 1, graphics, sorted);\n      this.quickSort(arr, pi + 1, high, graphics, sorted);\n    }\n  }\n\n  partition(arr, low, high, graphics, sorted) {\n    let g;\n    let pivot = arr[high];\n    let i = low - 1;\n    graphics.push(new Tuple(high, high, \"add\"));\n    for (let j = low; j <= high - 1; j++) {\n      graphics.push(new Tuple(j, j, \"add\"));\n      if (arr[j] < pivot) {\n        i++;\n        g = arr[i];\n        arr[i] = arr[j];\n        arr[j] = g;\n        graphics.push(new Tuple(i, j, \"add\"));\n        graphics.push(new Tuple(i, j, \"remove\"));\n        graphics.push(new Tuple(i, j, \"swap\"));\n      }\n      graphics.push(new Tuple(j, j, \"remove\"));\n    }\n    g = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = g;\n    graphics.push(new Tuple(i + 1, high, \"add\"));\n    graphics.push(new Tuple(i + 1, high, \"remove\"));\n    graphics.push(new Tuple(i + 1, high, \"swap\"));\n    graphics.push(new Tuple(high, high, \"remove\"));\n    for (let k = 0; k < arr.length; k++) {\n      if (arr[k] === sorted[k]) {\n        graphics.push(new Tuple(k, k, \"fix\"));\n      }\n    }\n    graphics.push(new Tuple(i + 1, i + 1, \"fix\"));\n    return i + 1;\n  }\n\n  async selectionSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let m, r, gValue, gWidth;\n    for (let i = 0; i < n - 1; i++) {\n      m = i;\n      for (let j = i + 1; j < n; j++) {\n        r = m;\n        bars[r].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        if (parseInt(bars[j].innerHTML) < parseInt(bars[m].innerHTML)) {\n          m = j;\n        }\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[r].style.backgroundColor = this.state.barColor;\n        bars[j].style.backgroundColor = this.state.barColor;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      gWidth = bars[i].style.width;\n      gValue = parseInt(bars[i].innerHTML);\n      bars[i].innerHTML = parseInt(bars[m].innerHTML);\n      bars[i].style.width = bars[m].style.width;\n      bars[m].innerHTML = gValue;\n      bars[m].style.width = gWidth;\n    }\n    bars[n - 1].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  getSpeed(speed) {\n    switch (speed) {\n      case \"Very Fast\":\n        return 25;\n      case \"Normal\":\n        return 250;\n      case \"Slow\":\n        return 500;\n      case \"Very Slow\":\n        return 1000;\n      default:\n        return 100;\n    }\n  }\n\n  getColor(barColor) {\n    switch (barColor) {\n      case \"Black\":\n        return \"#000000\";\n      case \"Green\":\n        return \"#026423d9\";\n      case \"Pink\":\n        return \"#d90d73cc\";\n      case \"Cyan\":\n        return \"#00e9e9\";\n      case \"Grey\":\n        return \"#424444c2\";\n      default:\n        return \"#000030ed\";\n    }\n  }\n\n  getBarHeight() {\n    let height =\n      (this.height - 300 - parseInt(this.state.size) * 5) /\n      parseInt(this.state.size);\n    return height;\n  }\n\n  getfontHeight() {\n    let fontHeight =\n      (this.height - 370 - parseInt(this.state.size) * 5) /\n      parseInt(this.state.size);\n    return fontHeight - 3;\n  }\n\n  getRandomElement() {\n    var max = 0;\n    var min = 50;\n    if (this.width < 768) max = (this.width * 5) / 10;\n    else max = (this.width * 4) / 10;\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  render() {\n    console.log(\"Render of sorting\")\n    return (\n      <div id=\"barView\">\n        {this.state.arr.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              width: `${value}px`,\n              backgroundColor: `${this.state.barColor}`,\n              height: `${this.getBarHeight()}px`,\n              fontSize: `${this.getfontHeight()}px`,\n            }}\n          >\n            {value}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default SortingVisualizer;\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport VisualizerController from \"./VisualizerController.js\";\nimport SortingVisualizer from \"./SortingVisualizer.js\";\nimport \"./App.css\";\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      default: {\n        sortingAlgorithm: \"Bubble Sort\",\n        size: \"20\",\n        speed: \"Normal\",\n        barColor: \"Blue\",\n        pointerColor: \"Cyan\",\n        sortedColor: \"Green\",\n        sort: false,\n        randomize: true,\n      },\n      sorted: false,\n    };\n  }\n  controllerDataHandler = (e) => {\n    this.setState(\n      {\n        default: {\n          sortingAlgorithm: e[\"sortingAlgorithm\"],\n          size: e[\"size\"],\n          speed: e[\"speed\"],\n          barColor: e[\"barColor\"],\n          pointerColor: e[\"pointerColor\"],\n          sortedColor: e[\"sortedColor\"],\n          sort: e[\"sort\"],\n          randomize: e[\"randomize\"],\n        },\n        sorted: false,\n      },\n      function () {\n        if (e[\"sort\"] === true) {\n          var element = document.getElementById(\"sortingVisualizer\");\n          element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n        }\n      }\n    );\n  };\n  visualizerDataHandler = (e) => {\n    this.setState({ sorted: e });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Container fluid>\n          <Row>\n            <Col>\n              <h2>Sorting Visualizer</h2>\n              <VisualizerController controllerDataHandler={this.controllerDataHandler} visualizerData={this.state.sorted}>\n                {this.state.sorted}\n              </VisualizerController>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col lg={9} id=\"sortingVisualizer\">\n              <SortingVisualizer visualizerDataHandler={this.visualizerDataHandler} controllerData={this.state.default}></SortingVisualizer>\n            </Col>\n            <Col lg={3}>\n            <div className=\"inf\">\n                Bubble Sort\n                <br></br>\n                Time Complexcity : O(n^2)\n                <br></br>\n                Space Complexcity : O(1)\n            </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <br></br>\n              <h6>A Project by Bimal Maity</h6>\n            </Col>\n          </Row>\n          \n          \n        </Container>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}